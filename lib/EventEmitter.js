// Generated by CoffeeScript 1.6.2
(function() {
  'use strict';
  var Bacon, EE, EventEmitter, common, events, root, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  events = require('events');

  Bacon = require('baconjs');

  EE = events.EventEmitter;

  if (!(EE && Bacon)) {
    return;
  }

  root = this;

  common = {
    asEventStream: function(event) {
      var cache;

      cache = this.asEventStream;
      if (cache[event] == null) {
        cache[event] = Bacon.fromEventTarget(this, event);
      }
      return cache[event];
    },
    es: function(event) {
      return this.asEventStream(event);
    },
    plug: function(eventStream) {
      var bus;

      bus = this.plug.bus;
      if (bus == null) {
        this.plug.bus = new Bacon.Bus();
        bus = this.plug.bus;
        bus.onValue(function(value) {
          return this.emit('value', value);
        });
        bus.onError(function(error) {
          return this.emit('error', error);
        });
      }
      return bus.plug(eventStream);
    }
  };

  EventEmitter = (function(_super) {
    __extends(EventEmitter, _super);

    function EventEmitter() {
      _ref = EventEmitter.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    EventEmitter.prototype.asEventStream = common.asEventStream;

    EventEmitter.prototype.es = common.es;

    EventEmitter.wrap = function(obj) {
      obj.asEventStream = common.asEventStream;
      return obj.es = common.es;
    };

    return EventEmitter;

  })(EE);

  if (typeof module !== "undefined" && module !== null) {
    module.exports = EventEmitter;
  } else {
    root.EventEmitter = EventEmitter;
  }

  EventEmitter.version = '0.0.1';

}).call(this);
