// Generated by CoffeeScript 1.6.2
(function() {
  'use strict';
  var Bacon, EE, EventEmitter, root, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EE = require('events').EventEmitter;

  Bacon = require('baconjs');

  if (!(EE && Bacon)) {
    return;
  }

  root = this;

  EventEmitter = (function(_super) {
    __extends(EventEmitter, _super);

    function EventEmitter() {
      _ref = EventEmitter.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    EventEmitter.prototype.asEventStream = function(event) {
      var cached;

      cached = this.asEventStream;
      if (cached[event] == null) {
        cached[event] = Bacon.fromEventTarget(this, event);
      }
      return cached[event];
    };

    EventEmitter.prototype.es = function(event) {
      return this.asEventStream(event);
    };

    EventEmitter.prototype.plug = function(eventStream, options) {
      var bus,
        _this = this;

      if (options == null) {
        options = {
          onValue: 'value',
          onError: 'error',
          onEnd: false
        };
      }
      bus = this.plug.bus;
      if (bus == null) {
        this.plug.bus = new Bacon.Bus();
        bus = this.plug.bus;
        if (options.onValue) {
          bus.onValue(function(value) {
            return _this.emit(options.onValue, value);
          });
        }
        if (options.onError) {
          bus.onError(function(error) {
            return _this.emit(options.onError, error);
          });
        }
        if (options.onEnd) {
          bus.onEnd(function(end) {
            return _this.emit(options.onEnd, end);
          });
        }
      }
      return bus.plug(eventStream);
    };

    EventEmitter.mixin = function(obj) {
      var key;

      for (key in EventEmitter.prototype) {
        if (obj[key] == null) {
          obj[key] = EventEmitter.prototype[key];
        }
      }
      return obj;
    };

    return EventEmitter;

  })(EE);

  if (typeof module !== "undefined" && module !== null) {
    module.exports = EventEmitter;
  } else {
    root.EventEmitter = EventEmitter;
  }

  EventEmitter.version = '0.0.2';

  /*
  Bacon.EventEmitter: Light-weight Baconized EventEmitter
  Copyright(c) 2013 Hao-kang Den <haokang.den@gmail.com>
  MIT Licenced
  */


}).call(this);
